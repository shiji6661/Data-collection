// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_UserRegister_FullMethodName             = "/user.User/UserRegister"
	User_SendSms_FullMethodName                  = "/user.User/SendSms"
	User_UserLogin_FullMethodName                = "/user.User/UserLogin"
	User_SendEmail_FullMethodName                = "/user.User/SendEmail"
	User_UserInfo_FullMethodName                 = "/user.User/UserInfo"
	User_InvitationCodeGeneration_FullMethodName = "/user.User/InvitationCodeGeneration"
	User_UserModify_FullMethodName               = "/user.User/UserModify"
	User_RealName_FullMethodName                 = "/user.User/RealName"
	User_UserViewOrder_FullMethodName            = "/user.User/UserViewOrder"
	User_UserViewOrderInfo_FullMethodName        = "/user.User/UserViewOrderInfo"
	User_UserLevelInfo_FullMethodName            = "/user.User/UserLevelInfo"
	User_UserLevelRights_FullMethodName          = "/user.User/UserLevelRights"
	User_UserSignIn_FullMethodName               = "/user.User/UserSignIn"
	User_UserReSigning_FullMethodName            = "/user.User/UserReSigning"
	User_UserApplyInvoice_FullMethodName         = "/user.User/UserApplyInvoice"
	User_FindMessage_FullMethodName              = "/user.User/FindMessage"
	User_SendMessage_FullMethodName              = "/user.User/SendMessage"
	User_UserUseRights_FullMethodName            = "/user.User/UserUseRights"
	User_UserInvoicesList_FullMethodName         = "/user.User/UserInvoicesList"
	User_UpdateInvoice_FullMethodName            = "/user.User/UpdateInvoice"
	User_UserReceiveCoupon_FullMethodName        = "/user.User/UserReceiveCoupon"
	User_ShowMemberPoints_FullMethodName         = "/user.User/ShowMemberPoints"
	User_CommissionList_FullMethodName           = "/user.User/CommissionList"
	User_InviteUserList_FullMethodName           = "/user.User/InviteUserList"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	InvitationCodeGeneration(ctx context.Context, in *InvitationCodeGenerationRequest, opts ...grpc.CallOption) (*InvitationCodeGenerationResponse, error)
	UserModify(ctx context.Context, in *UserModifyRequest, opts ...grpc.CallOption) (*UserModifyResponse, error)
	RealName(ctx context.Context, in *RealNameRequest, opts ...grpc.CallOption) (*RealNameResponse, error)
	UserViewOrder(ctx context.Context, in *UserViewOrderRequest, opts ...grpc.CallOption) (*UserViewOrderResponse, error)
	UserViewOrderInfo(ctx context.Context, in *UserViewOrderInfoRequest, opts ...grpc.CallOption) (*UserViewOrderInfoResponse, error)
	UserLevelInfo(ctx context.Context, in *UserLevelInfoRequest, opts ...grpc.CallOption) (*UserLevelInfoResponse, error)
	UserLevelRights(ctx context.Context, in *UserLevelRightsRequest, opts ...grpc.CallOption) (*UserLevelRightsResponse, error)
	UserSignIn(ctx context.Context, in *UserSignInRequest, opts ...grpc.CallOption) (*UserSignInResponse, error)
	UserReSigning(ctx context.Context, in *UserReSigningRequest, opts ...grpc.CallOption) (*UserReSigningResponse, error)
	UserApplyInvoice(ctx context.Context, in *UserApplyInvoiceRequest, opts ...grpc.CallOption) (*UserApplyInvoiceResponse, error)
	FindMessage(ctx context.Context, in *FindMessageRequest, opts ...grpc.CallOption) (*FindMessageResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	UserUseRights(ctx context.Context, in *UserUseRightsRequest, opts ...grpc.CallOption) (*UserUseRightsResponse, error)
	UserInvoicesList(ctx context.Context, in *UserInvoicesListRequest, opts ...grpc.CallOption) (*UserInvoicesListResponse, error)
	UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error)
	UserReceiveCoupon(ctx context.Context, in *UserReceiveCouponRequest, opts ...grpc.CallOption) (*UserReceiveCouponResponse, error)
	ShowMemberPoints(ctx context.Context, in *ShowMemberPointsRequest, opts ...grpc.CallOption) (*ShowMemberPointsResponse, error)
	CommissionList(ctx context.Context, in *CommissionListRequest, opts ...grpc.CallOption) (*CommissionListResponse, error)
	InviteUserList(ctx context.Context, in *InviteUserListRequest, opts ...grpc.CallOption) (*InviteUserListResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, User_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, User_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, User_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, User_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, User_UserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) InvitationCodeGeneration(ctx context.Context, in *InvitationCodeGenerationRequest, opts ...grpc.CallOption) (*InvitationCodeGenerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationCodeGenerationResponse)
	err := c.cc.Invoke(ctx, User_InvitationCodeGeneration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserModify(ctx context.Context, in *UserModifyRequest, opts ...grpc.CallOption) (*UserModifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserModifyResponse)
	err := c.cc.Invoke(ctx, User_UserModify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RealName(ctx context.Context, in *RealNameRequest, opts ...grpc.CallOption) (*RealNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealNameResponse)
	err := c.cc.Invoke(ctx, User_RealName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserViewOrder(ctx context.Context, in *UserViewOrderRequest, opts ...grpc.CallOption) (*UserViewOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserViewOrderResponse)
	err := c.cc.Invoke(ctx, User_UserViewOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserViewOrderInfo(ctx context.Context, in *UserViewOrderInfoRequest, opts ...grpc.CallOption) (*UserViewOrderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserViewOrderInfoResponse)
	err := c.cc.Invoke(ctx, User_UserViewOrderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLevelInfo(ctx context.Context, in *UserLevelInfoRequest, opts ...grpc.CallOption) (*UserLevelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLevelInfoResponse)
	err := c.cc.Invoke(ctx, User_UserLevelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLevelRights(ctx context.Context, in *UserLevelRightsRequest, opts ...grpc.CallOption) (*UserLevelRightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLevelRightsResponse)
	err := c.cc.Invoke(ctx, User_UserLevelRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserSignIn(ctx context.Context, in *UserSignInRequest, opts ...grpc.CallOption) (*UserSignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSignInResponse)
	err := c.cc.Invoke(ctx, User_UserSignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserReSigning(ctx context.Context, in *UserReSigningRequest, opts ...grpc.CallOption) (*UserReSigningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserReSigningResponse)
	err := c.cc.Invoke(ctx, User_UserReSigning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserApplyInvoice(ctx context.Context, in *UserApplyInvoiceRequest, opts ...grpc.CallOption) (*UserApplyInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserApplyInvoiceResponse)
	err := c.cc.Invoke(ctx, User_UserApplyInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindMessage(ctx context.Context, in *FindMessageRequest, opts ...grpc.CallOption) (*FindMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindMessageResponse)
	err := c.cc.Invoke(ctx, User_FindMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, User_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserUseRights(ctx context.Context, in *UserUseRightsRequest, opts ...grpc.CallOption) (*UserUseRightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserUseRightsResponse)
	err := c.cc.Invoke(ctx, User_UserUseRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInvoicesList(ctx context.Context, in *UserInvoicesListRequest, opts ...grpc.CallOption) (*UserInvoicesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInvoicesListResponse)
	err := c.cc.Invoke(ctx, User_UserInvoicesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInvoiceResponse)
	err := c.cc.Invoke(ctx, User_UpdateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserReceiveCoupon(ctx context.Context, in *UserReceiveCouponRequest, opts ...grpc.CallOption) (*UserReceiveCouponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserReceiveCouponResponse)
	err := c.cc.Invoke(ctx, User_UserReceiveCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShowMemberPoints(ctx context.Context, in *ShowMemberPointsRequest, opts ...grpc.CallOption) (*ShowMemberPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowMemberPointsResponse)
	err := c.cc.Invoke(ctx, User_ShowMemberPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CommissionList(ctx context.Context, in *CommissionListRequest, opts ...grpc.CallOption) (*CommissionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommissionListResponse)
	err := c.cc.Invoke(ctx, User_CommissionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) InviteUserList(ctx context.Context, in *InviteUserListRequest, opts ...grpc.CallOption) (*InviteUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserListResponse)
	err := c.cc.Invoke(ctx, User_InviteUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	InvitationCodeGeneration(context.Context, *InvitationCodeGenerationRequest) (*InvitationCodeGenerationResponse, error)
	UserModify(context.Context, *UserModifyRequest) (*UserModifyResponse, error)
	RealName(context.Context, *RealNameRequest) (*RealNameResponse, error)
	UserViewOrder(context.Context, *UserViewOrderRequest) (*UserViewOrderResponse, error)
	UserViewOrderInfo(context.Context, *UserViewOrderInfoRequest) (*UserViewOrderInfoResponse, error)
	UserLevelInfo(context.Context, *UserLevelInfoRequest) (*UserLevelInfoResponse, error)
	UserLevelRights(context.Context, *UserLevelRightsRequest) (*UserLevelRightsResponse, error)
	UserSignIn(context.Context, *UserSignInRequest) (*UserSignInResponse, error)
	UserReSigning(context.Context, *UserReSigningRequest) (*UserReSigningResponse, error)
	UserApplyInvoice(context.Context, *UserApplyInvoiceRequest) (*UserApplyInvoiceResponse, error)
	FindMessage(context.Context, *FindMessageRequest) (*FindMessageResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	UserUseRights(context.Context, *UserUseRightsRequest) (*UserUseRightsResponse, error)
	UserInvoicesList(context.Context, *UserInvoicesListRequest) (*UserInvoicesListResponse, error)
	UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error)
	UserReceiveCoupon(context.Context, *UserReceiveCouponRequest) (*UserReceiveCouponResponse, error)
	ShowMemberPoints(context.Context, *ShowMemberPointsRequest) (*ShowMemberPointsResponse, error)
	CommissionList(context.Context, *CommissionListRequest) (*CommissionListResponse, error)
	InviteUserList(context.Context, *InviteUserListRequest) (*InviteUserListResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedUserServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServer) InvitationCodeGeneration(context.Context, *InvitationCodeGenerationRequest) (*InvitationCodeGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvitationCodeGeneration not implemented")
}
func (UnimplementedUserServer) UserModify(context.Context, *UserModifyRequest) (*UserModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserModify not implemented")
}
func (UnimplementedUserServer) RealName(context.Context, *RealNameRequest) (*RealNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealName not implemented")
}
func (UnimplementedUserServer) UserViewOrder(context.Context, *UserViewOrderRequest) (*UserViewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserViewOrder not implemented")
}
func (UnimplementedUserServer) UserViewOrderInfo(context.Context, *UserViewOrderInfoRequest) (*UserViewOrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserViewOrderInfo not implemented")
}
func (UnimplementedUserServer) UserLevelInfo(context.Context, *UserLevelInfoRequest) (*UserLevelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelInfo not implemented")
}
func (UnimplementedUserServer) UserLevelRights(context.Context, *UserLevelRightsRequest) (*UserLevelRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelRights not implemented")
}
func (UnimplementedUserServer) UserSignIn(context.Context, *UserSignInRequest) (*UserSignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignIn not implemented")
}
func (UnimplementedUserServer) UserReSigning(context.Context, *UserReSigningRequest) (*UserReSigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserReSigning not implemented")
}
func (UnimplementedUserServer) UserApplyInvoice(context.Context, *UserApplyInvoiceRequest) (*UserApplyInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplyInvoice not implemented")
}
func (UnimplementedUserServer) FindMessage(context.Context, *FindMessageRequest) (*FindMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMessage not implemented")
}
func (UnimplementedUserServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedUserServer) UserUseRights(context.Context, *UserUseRightsRequest) (*UserUseRightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUseRights not implemented")
}
func (UnimplementedUserServer) UserInvoicesList(context.Context, *UserInvoicesListRequest) (*UserInvoicesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvoicesList not implemented")
}
func (UnimplementedUserServer) UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedUserServer) UserReceiveCoupon(context.Context, *UserReceiveCouponRequest) (*UserReceiveCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserReceiveCoupon not implemented")
}
func (UnimplementedUserServer) ShowMemberPoints(context.Context, *ShowMemberPointsRequest) (*ShowMemberPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMemberPoints not implemented")
}
func (UnimplementedUserServer) CommissionList(context.Context, *CommissionListRequest) (*CommissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionList not implemented")
}
func (UnimplementedUserServer) InviteUserList(context.Context, *InviteUserListRequest) (*InviteUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserList not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_InvitationCodeGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitationCodeGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).InvitationCodeGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_InvitationCodeGeneration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).InvitationCodeGeneration(ctx, req.(*InvitationCodeGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserModify(ctx, req.(*UserModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RealName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RealName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RealName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RealName(ctx, req.(*RealNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserViewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserViewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserViewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserViewOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserViewOrder(ctx, req.(*UserViewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserViewOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserViewOrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserViewOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserViewOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserViewOrderInfo(ctx, req.(*UserViewOrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLevelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLevelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLevelInfo(ctx, req.(*UserLevelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLevelRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLevelRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLevelRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLevelRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLevelRights(ctx, req.(*UserLevelRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserSignIn(ctx, req.(*UserSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserReSigning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReSigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserReSigning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserReSigning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserReSigning(ctx, req.(*UserReSigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserApplyInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApplyInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserApplyInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserApplyInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserApplyInvoice(ctx, req.(*UserApplyInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindMessage(ctx, req.(*FindMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserUseRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUseRightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserUseRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserUseRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserUseRights(ctx, req.(*UserUseRightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInvoicesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInvoicesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInvoicesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserInvoicesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInvoicesList(ctx, req.(*UserInvoicesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserReceiveCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReceiveCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserReceiveCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserReceiveCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserReceiveCoupon(ctx, req.(*UserReceiveCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShowMemberPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMemberPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShowMemberPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ShowMemberPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShowMemberPoints(ctx, req.(*ShowMemberPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CommissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CommissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CommissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CommissionList(ctx, req.(*CommissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_InviteUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).InviteUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_InviteUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).InviteUserList(ctx, req.(*InviteUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _User_SendSms_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _User_UserLogin_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _User_SendEmail_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _User_UserInfo_Handler,
		},
		{
			MethodName: "InvitationCodeGeneration",
			Handler:    _User_InvitationCodeGeneration_Handler,
		},
		{
			MethodName: "UserModify",
			Handler:    _User_UserModify_Handler,
		},
		{
			MethodName: "RealName",
			Handler:    _User_RealName_Handler,
		},
		{
			MethodName: "UserViewOrder",
			Handler:    _User_UserViewOrder_Handler,
		},
		{
			MethodName: "UserViewOrderInfo",
			Handler:    _User_UserViewOrderInfo_Handler,
		},
		{
			MethodName: "UserLevelInfo",
			Handler:    _User_UserLevelInfo_Handler,
		},
		{
			MethodName: "UserLevelRights",
			Handler:    _User_UserLevelRights_Handler,
		},
		{
			MethodName: "UserSignIn",
			Handler:    _User_UserSignIn_Handler,
		},
		{
			MethodName: "UserReSigning",
			Handler:    _User_UserReSigning_Handler,
		},
		{
			MethodName: "UserApplyInvoice",
			Handler:    _User_UserApplyInvoice_Handler,
		},
		{
			MethodName: "FindMessage",
			Handler:    _User_FindMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _User_SendMessage_Handler,
		},
		{
			MethodName: "UserUseRights",
			Handler:    _User_UserUseRights_Handler,
		},
		{
			MethodName: "UserInvoicesList",
			Handler:    _User_UserInvoicesList_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _User_UpdateInvoice_Handler,
		},
		{
			MethodName: "UserReceiveCoupon",
			Handler:    _User_UserReceiveCoupon_Handler,
		},
		{
			MethodName: "ShowMemberPoints",
			Handler:    _User_ShowMemberPoints_Handler,
		},
		{
			MethodName: "CommissionList",
			Handler:    _User_CommissionList_Handler,
		},
		{
			MethodName: "InviteUserList",
			Handler:    _User_InviteUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
