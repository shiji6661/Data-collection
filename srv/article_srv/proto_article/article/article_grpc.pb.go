// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Article_CateAdd_FullMethodName       = "/article.Article/CateAdd"
	Article_PostArticle_FullMethodName   = "/article.Article/PostArticle"
	Article_UpdateArticle_FullMethodName = "/article.Article/UpdateArticle"
	Article_DeleteArticle_FullMethodName = "/article.Article/DeleteArticle"
	Article_CateList_FullMethodName      = "/article.Article/CateList"
	Article_ArtComment_FullMethodName    = "/article.Article/ArtComment"
	Article_ReplyComment_FullMethodName  = "/article.Article/ReplyComment"
	Article_DelComment_FullMethodName    = "/article.Article/DelComment"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	CateAdd(ctx context.Context, in *CateAddReq, opts ...grpc.CallOption) (*CateAddResp, error)
	PostArticle(ctx context.Context, in *PostArticleReq, opts ...grpc.CallOption) (*PostArticleResp, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleResp, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error)
	CateList(ctx context.Context, in *CateListReq, opts ...grpc.CallOption) (*CateListResp, error)
	ArtComment(ctx context.Context, in *ArtCommentReq, opts ...grpc.CallOption) (*ArtCommentResp, error)
	ReplyComment(ctx context.Context, in *ReplyCommentReq, opts ...grpc.CallOption) (*ReplyCommentResp, error)
	DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) CateAdd(ctx context.Context, in *CateAddReq, opts ...grpc.CallOption) (*CateAddResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CateAddResp)
	err := c.cc.Invoke(ctx, Article_CateAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) PostArticle(ctx context.Context, in *PostArticleReq, opts ...grpc.CallOption) (*PostArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostArticleResp)
	err := c.cc.Invoke(ctx, Article_PostArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleResp)
	err := c.cc.Invoke(ctx, Article_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleResp)
	err := c.cc.Invoke(ctx, Article_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CateList(ctx context.Context, in *CateListReq, opts ...grpc.CallOption) (*CateListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CateListResp)
	err := c.cc.Invoke(ctx, Article_CateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArtComment(ctx context.Context, in *ArtCommentReq, opts ...grpc.CallOption) (*ArtCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArtCommentResp)
	err := c.cc.Invoke(ctx, Article_ArtComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ReplyComment(ctx context.Context, in *ReplyCommentReq, opts ...grpc.CallOption) (*ReplyCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyCommentResp)
	err := c.cc.Invoke(ctx, Article_ReplyComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelCommentResp)
	err := c.cc.Invoke(ctx, Article_DelComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility.
type ArticleServer interface {
	CateAdd(context.Context, *CateAddReq) (*CateAddResp, error)
	PostArticle(context.Context, *PostArticleReq) (*PostArticleResp, error)
	UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleResp, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleResp, error)
	CateList(context.Context, *CateListReq) (*CateListResp, error)
	ArtComment(context.Context, *ArtCommentReq) (*ArtCommentResp, error)
	ReplyComment(context.Context, *ReplyCommentReq) (*ReplyCommentResp, error)
	DelComment(context.Context, *DelCommentReq) (*DelCommentResp, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServer struct{}

func (UnimplementedArticleServer) CateAdd(context.Context, *CateAddReq) (*CateAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CateAdd not implemented")
}
func (UnimplementedArticleServer) PostArticle(context.Context, *PostArticleReq) (*PostArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostArticle not implemented")
}
func (UnimplementedArticleServer) UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleServer) DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleServer) CateList(context.Context, *CateListReq) (*CateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CateList not implemented")
}
func (UnimplementedArticleServer) ArtComment(context.Context, *ArtCommentReq) (*ArtCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArtComment not implemented")
}
func (UnimplementedArticleServer) ReplyComment(context.Context, *ReplyCommentReq) (*ReplyCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedArticleServer) DelComment(context.Context, *DelCommentReq) (*DelCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelComment not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}
func (UnimplementedArticleServer) testEmbeddedByValue()                 {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	// If the following call pancis, it indicates UnimplementedArticleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_CateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CateAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_CateAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CateAdd(ctx, req.(*CateAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_PostArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).PostArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_PostArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).PostArticle(ctx, req.(*PostArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_CateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CateList(ctx, req.(*CateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArtComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArtComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArtComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArtComment(ctx, req.(*ArtCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ReplyComment(ctx, req.(*ReplyCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DelComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelComment(ctx, req.(*DelCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CateAdd",
			Handler:    _Article_CateAdd_Handler,
		},
		{
			MethodName: "PostArticle",
			Handler:    _Article_PostArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Article_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Article_DeleteArticle_Handler,
		},
		{
			MethodName: "CateList",
			Handler:    _Article_CateList_Handler,
		},
		{
			MethodName: "ArtComment",
			Handler:    _Article_ArtComment_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _Article_ReplyComment_Handler,
		},
		{
			MethodName: "DelComment",
			Handler:    _Article_DelComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
