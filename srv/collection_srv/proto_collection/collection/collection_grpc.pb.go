// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: collection.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Collection_DataCollection_FullMethodName   = "/collection.Collection/DataCollection"
	Collection_InformationStore_FullMethodName = "/collection.Collection/InformationStore"
	Collection_MessageCache_FullMethodName     = "/collection.Collection/MessageCache"
	Collection_GetMessageCache_FullMethodName  = "/collection.Collection/GetMessageCache"
	Collection_DataCleaning_FullMethodName     = "/collection.Collection/DataCleaning"
	Collection_DataAnalysis_FullMethodName     = "/collection.Collection/DataAnalysis"
	Collection_UpdateStatus_FullMethodName     = "/collection.Collection/UpdateStatus"
)

// CollectionClient is the client API for Collection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionClient interface {
	DataCollection(ctx context.Context, in *DataCollectionRequest, opts ...grpc.CallOption) (*DataCollectionResponse, error)
	InformationStore(ctx context.Context, in *InformationStoreRequest, opts ...grpc.CallOption) (*InformationStoreResponse, error)
	MessageCache(ctx context.Context, in *MessageCacheRequest, opts ...grpc.CallOption) (*MessageCacheResponse, error)
	GetMessageCache(ctx context.Context, in *GetMessageCacheRequest, opts ...grpc.CallOption) (*GetMessageCacheResponse, error)
	DataCleaning(ctx context.Context, in *DataCleaningRequest, opts ...grpc.CallOption) (*DataCleaningResponse, error)
	DataAnalysis(ctx context.Context, in *DataAnalysisRequest, opts ...grpc.CallOption) (*DataAnalysisResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
}

type collectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionClient(cc grpc.ClientConnInterface) CollectionClient {
	return &collectionClient{cc}
}

func (c *collectionClient) DataCollection(ctx context.Context, in *DataCollectionRequest, opts ...grpc.CallOption) (*DataCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataCollectionResponse)
	err := c.cc.Invoke(ctx, Collection_DataCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) InformationStore(ctx context.Context, in *InformationStoreRequest, opts ...grpc.CallOption) (*InformationStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InformationStoreResponse)
	err := c.cc.Invoke(ctx, Collection_InformationStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) MessageCache(ctx context.Context, in *MessageCacheRequest, opts ...grpc.CallOption) (*MessageCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageCacheResponse)
	err := c.cc.Invoke(ctx, Collection_MessageCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetMessageCache(ctx context.Context, in *GetMessageCacheRequest, opts ...grpc.CallOption) (*GetMessageCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageCacheResponse)
	err := c.cc.Invoke(ctx, Collection_GetMessageCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) DataCleaning(ctx context.Context, in *DataCleaningRequest, opts ...grpc.CallOption) (*DataCleaningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataCleaningResponse)
	err := c.cc.Invoke(ctx, Collection_DataCleaning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) DataAnalysis(ctx context.Context, in *DataAnalysisRequest, opts ...grpc.CallOption) (*DataAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataAnalysisResponse)
	err := c.cc.Invoke(ctx, Collection_DataAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, Collection_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionServer is the server API for Collection service.
// All implementations must embed UnimplementedCollectionServer
// for forward compatibility.
type CollectionServer interface {
	DataCollection(context.Context, *DataCollectionRequest) (*DataCollectionResponse, error)
	InformationStore(context.Context, *InformationStoreRequest) (*InformationStoreResponse, error)
	MessageCache(context.Context, *MessageCacheRequest) (*MessageCacheResponse, error)
	GetMessageCache(context.Context, *GetMessageCacheRequest) (*GetMessageCacheResponse, error)
	DataCleaning(context.Context, *DataCleaningRequest) (*DataCleaningResponse, error)
	DataAnalysis(context.Context, *DataAnalysisRequest) (*DataAnalysisResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	mustEmbedUnimplementedCollectionServer()
}

// UnimplementedCollectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionServer struct{}

func (UnimplementedCollectionServer) DataCollection(context.Context, *DataCollectionRequest) (*DataCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCollection not implemented")
}
func (UnimplementedCollectionServer) InformationStore(context.Context, *InformationStoreRequest) (*InformationStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationStore not implemented")
}
func (UnimplementedCollectionServer) MessageCache(context.Context, *MessageCacheRequest) (*MessageCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageCache not implemented")
}
func (UnimplementedCollectionServer) GetMessageCache(context.Context, *GetMessageCacheRequest) (*GetMessageCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageCache not implemented")
}
func (UnimplementedCollectionServer) DataCleaning(context.Context, *DataCleaningRequest) (*DataCleaningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCleaning not implemented")
}
func (UnimplementedCollectionServer) DataAnalysis(context.Context, *DataAnalysisRequest) (*DataAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataAnalysis not implemented")
}
func (UnimplementedCollectionServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedCollectionServer) mustEmbedUnimplementedCollectionServer() {}
func (UnimplementedCollectionServer) testEmbeddedByValue()                    {}

// UnsafeCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServer will
// result in compilation errors.
type UnsafeCollectionServer interface {
	mustEmbedUnimplementedCollectionServer()
}

func RegisterCollectionServer(s grpc.ServiceRegistrar, srv CollectionServer) {
	// If the following call pancis, it indicates UnimplementedCollectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Collection_ServiceDesc, srv)
}

func _Collection_DataCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).DataCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_DataCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).DataCollection(ctx, req.(*DataCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_InformationStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformationStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).InformationStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_InformationStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).InformationStore(ctx, req.(*InformationStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_MessageCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).MessageCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_MessageCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).MessageCache(ctx, req.(*MessageCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetMessageCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetMessageCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_GetMessageCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetMessageCache(ctx, req.(*GetMessageCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_DataCleaning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCleaningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).DataCleaning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_DataCleaning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).DataCleaning(ctx, req.(*DataCleaningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_DataAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).DataAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_DataAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).DataAnalysis(ctx, req.(*DataAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collection_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Collection_ServiceDesc is the grpc.ServiceDesc for Collection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collection.Collection",
	HandlerType: (*CollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataCollection",
			Handler:    _Collection_DataCollection_Handler,
		},
		{
			MethodName: "InformationStore",
			Handler:    _Collection_InformationStore_Handler,
		},
		{
			MethodName: "MessageCache",
			Handler:    _Collection_MessageCache_Handler,
		},
		{
			MethodName: "GetMessageCache",
			Handler:    _Collection_GetMessageCache_Handler,
		},
		{
			MethodName: "DataCleaning",
			Handler:    _Collection_DataCleaning_Handler,
		},
		{
			MethodName: "DataAnalysis",
			Handler:    _Collection_DataAnalysis_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Collection_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection.proto",
}
