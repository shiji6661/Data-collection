// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: merchant.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Merchant_MerChantRegister_FullMethodName         = "/merchant.Merchant/MerChantRegister"
	Merchant_MerchantLogin_FullMethodName            = "/merchant.Merchant/MerchantLogin"
	Merchant_SendSms_FullMethodName                  = "/merchant.Merchant/SendSms"
	Merchant_SendEmail_FullMethodName                = "/merchant.Merchant/SendEmail"
	Merchant_ParseCode_FullMethodName                = "/merchant.Merchant/ParseCode"
	Merchant_StatisticsStoreDailyData_FullMethodName = "/merchant.Merchant/StatisticsStoreDailyData"
)

// MerchantClient is the client API for Merchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantClient interface {
	MerChantRegister(ctx context.Context, in *MerChantRegisterRequest, opts ...grpc.CallOption) (*MerChantRegisterResponse, error)
	MerchantLogin(ctx context.Context, in *MerchantLoginRequest, opts ...grpc.CallOption) (*MerchantLoginResponse, error)
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	ParseCode(ctx context.Context, in *ParseCodeRequest, opts ...grpc.CallOption) (*ParseCodeResponse, error)
	StatisticsStoreDailyData(ctx context.Context, in *StatisticsStoreDailyDataRequest, opts ...grpc.CallOption) (*StatisticsStoreDailyDataResponse, error)
}

type merchantClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantClient(cc grpc.ClientConnInterface) MerchantClient {
	return &merchantClient{cc}
}

func (c *merchantClient) MerChantRegister(ctx context.Context, in *MerChantRegisterRequest, opts ...grpc.CallOption) (*MerChantRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerChantRegisterResponse)
	err := c.cc.Invoke(ctx, Merchant_MerChantRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) MerchantLogin(ctx context.Context, in *MerchantLoginRequest, opts ...grpc.CallOption) (*MerchantLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantLoginResponse)
	err := c.cc.Invoke(ctx, Merchant_MerchantLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, Merchant_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, Merchant_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) ParseCode(ctx context.Context, in *ParseCodeRequest, opts ...grpc.CallOption) (*ParseCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseCodeResponse)
	err := c.cc.Invoke(ctx, Merchant_ParseCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) StatisticsStoreDailyData(ctx context.Context, in *StatisticsStoreDailyDataRequest, opts ...grpc.CallOption) (*StatisticsStoreDailyDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticsStoreDailyDataResponse)
	err := c.cc.Invoke(ctx, Merchant_StatisticsStoreDailyData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServer is the server API for Merchant service.
// All implementations must embed UnimplementedMerchantServer
// for forward compatibility
type MerchantServer interface {
	MerChantRegister(context.Context, *MerChantRegisterRequest) (*MerChantRegisterResponse, error)
	MerchantLogin(context.Context, *MerchantLoginRequest) (*MerchantLoginResponse, error)
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	ParseCode(context.Context, *ParseCodeRequest) (*ParseCodeResponse, error)
	StatisticsStoreDailyData(context.Context, *StatisticsStoreDailyDataRequest) (*StatisticsStoreDailyDataResponse, error)
	mustEmbedUnimplementedMerchantServer()
}

// UnimplementedMerchantServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServer struct {
}

func (UnimplementedMerchantServer) MerChantRegister(context.Context, *MerChantRegisterRequest) (*MerChantRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerChantRegister not implemented")
}
func (UnimplementedMerchantServer) MerchantLogin(context.Context, *MerchantLoginRequest) (*MerchantLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantLogin not implemented")
}
func (UnimplementedMerchantServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedMerchantServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedMerchantServer) ParseCode(context.Context, *ParseCodeRequest) (*ParseCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseCode not implemented")
}
func (UnimplementedMerchantServer) StatisticsStoreDailyData(context.Context, *StatisticsStoreDailyDataRequest) (*StatisticsStoreDailyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticsStoreDailyData not implemented")
}
func (UnimplementedMerchantServer) mustEmbedUnimplementedMerchantServer() {}

// UnsafeMerchantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServer will
// result in compilation errors.
type UnsafeMerchantServer interface {
	mustEmbedUnimplementedMerchantServer()
}

func RegisterMerchantServer(s grpc.ServiceRegistrar, srv MerchantServer) {
	s.RegisterService(&Merchant_ServiceDesc, srv)
}

func _Merchant_MerChantRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerChantRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).MerChantRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_MerChantRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).MerChantRegister(ctx, req.(*MerChantRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_MerchantLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).MerchantLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_MerchantLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).MerchantLogin(ctx, req.(*MerchantLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_ParseCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).ParseCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_ParseCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).ParseCode(ctx, req.(*ParseCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_StatisticsStoreDailyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsStoreDailyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).StatisticsStoreDailyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_StatisticsStoreDailyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).StatisticsStoreDailyData(ctx, req.(*StatisticsStoreDailyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Merchant_ServiceDesc is the grpc.ServiceDesc for Merchant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Merchant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.Merchant",
	HandlerType: (*MerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MerChantRegister",
			Handler:    _Merchant_MerChantRegister_Handler,
		},
		{
			MethodName: "MerchantLogin",
			Handler:    _Merchant_MerchantLogin_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _Merchant_SendSms_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _Merchant_SendEmail_Handler,
		},
		{
			MethodName: "ParseCode",
			Handler:    _Merchant_ParseCode_Handler,
		},
		{
			MethodName: "StatisticsStoreDailyData",
			Handler:    _Merchant_StatisticsStoreDailyData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
