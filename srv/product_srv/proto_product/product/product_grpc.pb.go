// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Product_ProductInfo_FullMethodName           = "/product.Product/ProductInfo"
	Product_ProductFilter_FullMethodName         = "/product.Product/ProductFilter"
	Product_ProductCategory_FullMethodName       = "/product.Product/ProductCategory"
	Product_ProductKeyword_FullMethodName        = "/product.Product/ProductKeyword"
	Product_ProductRecommend_FullMethodName      = "/product.Product/ProductRecommend"
	Product_AddToCart_FullMethodName             = "/product.Product/AddToCart"
	Product_CreateBargainProduct_FullMethodName  = "/product.Product/CreateBargainProduct"
	Product_AddProduct_FullMethodName            = "/product.Product/AddProduct"
	Product_MerchantDeletePro_FullMethodName     = "/product.Product/MerchantDeletePro"
	Product_CreateBargainUser_FullMethodName     = "/product.Product/CreateBargainUser"
	Product_AddGroupProduct_FullMethodName       = "/product.Product/AddGroupProduct"
	Product_RemoveGroupProduct_FullMethodName    = "/product.Product/RemoveGroupProduct"
	Product_CreateUserGroup_FullMethodName       = "/product.Product/CreateUserGroup"
	Product_CreateBargainUserHelp_FullMethodName = "/product.Product/CreateBargainUserHelp"
	Product_CartTotalPrice_FullMethodName        = "/product.Product/CartTotalPrice"
	Product_ProductList_FullMethodName           = "/product.Product/ProductList"
	Product_AddCoupon_FullMethodName             = "/product.Product/AddCoupon"
	Product_MerAddCouponStore_FullMethodName     = "/product.Product/MerAddCouponStore"
	Product_MerDeleteCouponStore_FullMethodName  = "/product.Product/MerDeleteCouponStore"
	Product_AddSpikeProduct_FullMethodName       = "/product.Product/AddSpikeProduct"
	Product_FlashSale_FullMethodName             = "/product.Product/FlashSale"
	Product_UserJoinGroup_FullMethodName         = "/product.Product/UserJoinGroup"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	ProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductInfoResponse, error)
	ProductFilter(ctx context.Context, in *ProductFilterRequest, opts ...grpc.CallOption) (*ProductFilterResponse, error)
	ProductCategory(ctx context.Context, in *ProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategoryResponse, error)
	ProductKeyword(ctx context.Context, in *ProductKeywordRequest, opts ...grpc.CallOption) (*ProductKeywordResponse, error)
	ProductRecommend(ctx context.Context, in *ProductRecommendRequest, opts ...grpc.CallOption) (*ProductRecommendResponse, error)
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	CreateBargainProduct(ctx context.Context, in *CreateBargainProductRequest, opts ...grpc.CallOption) (*CreateBargainProductResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	MerchantDeletePro(ctx context.Context, in *MerchantDeleteProRequest, opts ...grpc.CallOption) (*MerchantDeleteProResponse, error)
	CreateBargainUser(ctx context.Context, in *CreateBargainUserRequest, opts ...grpc.CallOption) (*CreateBargainUserResponse, error)
	AddGroupProduct(ctx context.Context, in *AddGroupProductRequest, opts ...grpc.CallOption) (*AddGroupProductResponse, error)
	RemoveGroupProduct(ctx context.Context, in *RemoveGroupProductRequest, opts ...grpc.CallOption) (*RemoveGroupProductResponse, error)
	CreateUserGroup(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*CreateUserGroupResponse, error)
	CreateBargainUserHelp(ctx context.Context, in *CreateBargainUserHelpRequest, opts ...grpc.CallOption) (*CreateBargainUserHelpResponse, error)
	CartTotalPrice(ctx context.Context, in *CartTotalPriceRequest, opts ...grpc.CallOption) (*CartTotalPriceResponse, error)
	ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error)
	AddCoupon(ctx context.Context, in *AddCouponRequest, opts ...grpc.CallOption) (*AddCouponResponse, error)
	MerAddCouponStore(ctx context.Context, in *MerAddCouponStoreRequest, opts ...grpc.CallOption) (*MerAddCouponStoreResponse, error)
	MerDeleteCouponStore(ctx context.Context, in *MerDeleteCouponStoreRequest, opts ...grpc.CallOption) (*MerDeleteCouponStoreResponse, error)
	AddSpikeProduct(ctx context.Context, in *AddSpikeProductRequest, opts ...grpc.CallOption) (*AddSpikeProductResponse, error)
	FlashSale(ctx context.Context, in *FlashSaleRequest, opts ...grpc.CallOption) (*FlashSaleResponse, error)
	UserJoinGroup(ctx context.Context, in *UserJoinGroupRequest, opts ...grpc.CallOption) (*UserJoinGroupResponse, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) ProductInfo(ctx context.Context, in *ProductInfoRequest, opts ...grpc.CallOption) (*ProductInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductInfoResponse)
	err := c.cc.Invoke(ctx, Product_ProductInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductFilter(ctx context.Context, in *ProductFilterRequest, opts ...grpc.CallOption) (*ProductFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductFilterResponse)
	err := c.cc.Invoke(ctx, Product_ProductFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductCategory(ctx context.Context, in *ProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCategoryResponse)
	err := c.cc.Invoke(ctx, Product_ProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductKeyword(ctx context.Context, in *ProductKeywordRequest, opts ...grpc.CallOption) (*ProductKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductKeywordResponse)
	err := c.cc.Invoke(ctx, Product_ProductKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductRecommend(ctx context.Context, in *ProductRecommendRequest, opts ...grpc.CallOption) (*ProductRecommendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductRecommendResponse)
	err := c.cc.Invoke(ctx, Product_ProductRecommend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, Product_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateBargainProduct(ctx context.Context, in *CreateBargainProductRequest, opts ...grpc.CallOption) (*CreateBargainProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBargainProductResponse)
	err := c.cc.Invoke(ctx, Product_CreateBargainProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, Product_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) MerchantDeletePro(ctx context.Context, in *MerchantDeleteProRequest, opts ...grpc.CallOption) (*MerchantDeleteProResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantDeleteProResponse)
	err := c.cc.Invoke(ctx, Product_MerchantDeletePro_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateBargainUser(ctx context.Context, in *CreateBargainUserRequest, opts ...grpc.CallOption) (*CreateBargainUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBargainUserResponse)
	err := c.cc.Invoke(ctx, Product_CreateBargainUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddGroupProduct(ctx context.Context, in *AddGroupProductRequest, opts ...grpc.CallOption) (*AddGroupProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGroupProductResponse)
	err := c.cc.Invoke(ctx, Product_AddGroupProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) RemoveGroupProduct(ctx context.Context, in *RemoveGroupProductRequest, opts ...grpc.CallOption) (*RemoveGroupProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveGroupProductResponse)
	err := c.cc.Invoke(ctx, Product_RemoveGroupProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateUserGroup(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*CreateUserGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserGroupResponse)
	err := c.cc.Invoke(ctx, Product_CreateUserGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateBargainUserHelp(ctx context.Context, in *CreateBargainUserHelpRequest, opts ...grpc.CallOption) (*CreateBargainUserHelpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBargainUserHelpResponse)
	err := c.cc.Invoke(ctx, Product_CreateBargainUserHelp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CartTotalPrice(ctx context.Context, in *CartTotalPriceRequest, opts ...grpc.CallOption) (*CartTotalPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartTotalPriceResponse)
	err := c.cc.Invoke(ctx, Product_CartTotalPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, Product_ProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddCoupon(ctx context.Context, in *AddCouponRequest, opts ...grpc.CallOption) (*AddCouponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCouponResponse)
	err := c.cc.Invoke(ctx, Product_AddCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) MerAddCouponStore(ctx context.Context, in *MerAddCouponStoreRequest, opts ...grpc.CallOption) (*MerAddCouponStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerAddCouponStoreResponse)
	err := c.cc.Invoke(ctx, Product_MerAddCouponStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) MerDeleteCouponStore(ctx context.Context, in *MerDeleteCouponStoreRequest, opts ...grpc.CallOption) (*MerDeleteCouponStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerDeleteCouponStoreResponse)
	err := c.cc.Invoke(ctx, Product_MerDeleteCouponStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddSpikeProduct(ctx context.Context, in *AddSpikeProductRequest, opts ...grpc.CallOption) (*AddSpikeProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSpikeProductResponse)
	err := c.cc.Invoke(ctx, Product_AddSpikeProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) FlashSale(ctx context.Context, in *FlashSaleRequest, opts ...grpc.CallOption) (*FlashSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlashSaleResponse)
	err := c.cc.Invoke(ctx, Product_FlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UserJoinGroup(ctx context.Context, in *UserJoinGroupRequest, opts ...grpc.CallOption) (*UserJoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserJoinGroupResponse)
	err := c.cc.Invoke(ctx, Product_UserJoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	ProductInfo(context.Context, *ProductInfoRequest) (*ProductInfoResponse, error)
	ProductFilter(context.Context, *ProductFilterRequest) (*ProductFilterResponse, error)
	ProductCategory(context.Context, *ProductCategoryRequest) (*ProductCategoryResponse, error)
	ProductKeyword(context.Context, *ProductKeywordRequest) (*ProductKeywordResponse, error)
	ProductRecommend(context.Context, *ProductRecommendRequest) (*ProductRecommendResponse, error)
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	CreateBargainProduct(context.Context, *CreateBargainProductRequest) (*CreateBargainProductResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	MerchantDeletePro(context.Context, *MerchantDeleteProRequest) (*MerchantDeleteProResponse, error)
	CreateBargainUser(context.Context, *CreateBargainUserRequest) (*CreateBargainUserResponse, error)
	AddGroupProduct(context.Context, *AddGroupProductRequest) (*AddGroupProductResponse, error)
	RemoveGroupProduct(context.Context, *RemoveGroupProductRequest) (*RemoveGroupProductResponse, error)
	CreateUserGroup(context.Context, *CreateUserGroupRequest) (*CreateUserGroupResponse, error)
	CreateBargainUserHelp(context.Context, *CreateBargainUserHelpRequest) (*CreateBargainUserHelpResponse, error)
	CartTotalPrice(context.Context, *CartTotalPriceRequest) (*CartTotalPriceResponse, error)
	ProductList(context.Context, *ProductListRequest) (*ProductListResponse, error)
	AddCoupon(context.Context, *AddCouponRequest) (*AddCouponResponse, error)
	MerAddCouponStore(context.Context, *MerAddCouponStoreRequest) (*MerAddCouponStoreResponse, error)
	MerDeleteCouponStore(context.Context, *MerDeleteCouponStoreRequest) (*MerDeleteCouponStoreResponse, error)
	AddSpikeProduct(context.Context, *AddSpikeProductRequest) (*AddSpikeProductResponse, error)
	FlashSale(context.Context, *FlashSaleRequest) (*FlashSaleResponse, error)
	UserJoinGroup(context.Context, *UserJoinGroupRequest) (*UserJoinGroupResponse, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) ProductInfo(context.Context, *ProductInfoRequest) (*ProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfo not implemented")
}
func (UnimplementedProductServer) ProductFilter(context.Context, *ProductFilterRequest) (*ProductFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFilter not implemented")
}
func (UnimplementedProductServer) ProductCategory(context.Context, *ProductCategoryRequest) (*ProductCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategory not implemented")
}
func (UnimplementedProductServer) ProductKeyword(context.Context, *ProductKeywordRequest) (*ProductKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductKeyword not implemented")
}
func (UnimplementedProductServer) ProductRecommend(context.Context, *ProductRecommendRequest) (*ProductRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductRecommend not implemented")
}
func (UnimplementedProductServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedProductServer) CreateBargainProduct(context.Context, *CreateBargainProductRequest) (*CreateBargainProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBargainProduct not implemented")
}
func (UnimplementedProductServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductServer) MerchantDeletePro(context.Context, *MerchantDeleteProRequest) (*MerchantDeleteProResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantDeletePro not implemented")
}
func (UnimplementedProductServer) CreateBargainUser(context.Context, *CreateBargainUserRequest) (*CreateBargainUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBargainUser not implemented")
}
func (UnimplementedProductServer) AddGroupProduct(context.Context, *AddGroupProductRequest) (*AddGroupProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupProduct not implemented")
}
func (UnimplementedProductServer) RemoveGroupProduct(context.Context, *RemoveGroupProductRequest) (*RemoveGroupProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupProduct not implemented")
}
func (UnimplementedProductServer) CreateUserGroup(context.Context, *CreateUserGroupRequest) (*CreateUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroup not implemented")
}
func (UnimplementedProductServer) CreateBargainUserHelp(context.Context, *CreateBargainUserHelpRequest) (*CreateBargainUserHelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBargainUserHelp not implemented")
}
func (UnimplementedProductServer) CartTotalPrice(context.Context, *CartTotalPriceRequest) (*CartTotalPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartTotalPrice not implemented")
}
func (UnimplementedProductServer) ProductList(context.Context, *ProductListRequest) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedProductServer) AddCoupon(context.Context, *AddCouponRequest) (*AddCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoupon not implemented")
}
func (UnimplementedProductServer) MerAddCouponStore(context.Context, *MerAddCouponStoreRequest) (*MerAddCouponStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerAddCouponStore not implemented")
}
func (UnimplementedProductServer) MerDeleteCouponStore(context.Context, *MerDeleteCouponStoreRequest) (*MerDeleteCouponStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerDeleteCouponStore not implemented")
}
func (UnimplementedProductServer) AddSpikeProduct(context.Context, *AddSpikeProductRequest) (*AddSpikeProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpikeProduct not implemented")
}
func (UnimplementedProductServer) FlashSale(context.Context, *FlashSaleRequest) (*FlashSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashSale not implemented")
}
func (UnimplementedProductServer) UserJoinGroup(context.Context, *UserJoinGroupRequest) (*UserJoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserJoinGroup not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_ProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductInfo(ctx, req.(*ProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductFilter(ctx, req.(*ProductFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductCategory(ctx, req.(*ProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductKeyword(ctx, req.(*ProductKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductRecommend(ctx, req.(*ProductRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateBargainProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBargainProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateBargainProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateBargainProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateBargainProduct(ctx, req.(*CreateBargainProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_MerchantDeletePro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantDeleteProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).MerchantDeletePro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_MerchantDeletePro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).MerchantDeletePro(ctx, req.(*MerchantDeleteProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateBargainUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBargainUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateBargainUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateBargainUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateBargainUser(ctx, req.(*CreateBargainUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddGroupProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddGroupProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddGroupProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddGroupProduct(ctx, req.(*AddGroupProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_RemoveGroupProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).RemoveGroupProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_RemoveGroupProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).RemoveGroupProduct(ctx, req.(*RemoveGroupProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateUserGroup(ctx, req.(*CreateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateBargainUserHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBargainUserHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateBargainUserHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateBargainUserHelp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateBargainUserHelp(ctx, req.(*CreateBargainUserHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CartTotalPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartTotalPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CartTotalPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CartTotalPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CartTotalPrice(ctx, req.(*CartTotalPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductList(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddCoupon(ctx, req.(*AddCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_MerAddCouponStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerAddCouponStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).MerAddCouponStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_MerAddCouponStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).MerAddCouponStore(ctx, req.(*MerAddCouponStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_MerDeleteCouponStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerDeleteCouponStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).MerDeleteCouponStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_MerDeleteCouponStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).MerDeleteCouponStore(ctx, req.(*MerDeleteCouponStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddSpikeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpikeProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddSpikeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddSpikeProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddSpikeProduct(ctx, req.(*AddSpikeProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_FlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).FlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_FlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).FlashSale(ctx, req.(*FlashSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UserJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UserJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UserJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UserJoinGroup(ctx, req.(*UserJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductInfo",
			Handler:    _Product_ProductInfo_Handler,
		},
		{
			MethodName: "ProductFilter",
			Handler:    _Product_ProductFilter_Handler,
		},
		{
			MethodName: "ProductCategory",
			Handler:    _Product_ProductCategory_Handler,
		},
		{
			MethodName: "ProductKeyword",
			Handler:    _Product_ProductKeyword_Handler,
		},
		{
			MethodName: "ProductRecommend",
			Handler:    _Product_ProductRecommend_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _Product_AddToCart_Handler,
		},
		{
			MethodName: "CreateBargainProduct",
			Handler:    _Product_CreateBargainProduct_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _Product_AddProduct_Handler,
		},
		{
			MethodName: "MerchantDeletePro",
			Handler:    _Product_MerchantDeletePro_Handler,
		},
		{
			MethodName: "CreateBargainUser",
			Handler:    _Product_CreateBargainUser_Handler,
		},
		{
			MethodName: "AddGroupProduct",
			Handler:    _Product_AddGroupProduct_Handler,
		},
		{
			MethodName: "RemoveGroupProduct",
			Handler:    _Product_RemoveGroupProduct_Handler,
		},
		{
			MethodName: "CreateUserGroup",
			Handler:    _Product_CreateUserGroup_Handler,
		},
		{
			MethodName: "CreateBargainUserHelp",
			Handler:    _Product_CreateBargainUserHelp_Handler,
		},
		{
			MethodName: "CartTotalPrice",
			Handler:    _Product_CartTotalPrice_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _Product_ProductList_Handler,
		},
		{
			MethodName: "AddCoupon",
			Handler:    _Product_AddCoupon_Handler,
		},
		{
			MethodName: "MerAddCouponStore",
			Handler:    _Product_MerAddCouponStore_Handler,
		},
		{
			MethodName: "MerDeleteCouponStore",
			Handler:    _Product_MerDeleteCouponStore_Handler,
		},
		{
			MethodName: "AddSpikeProduct",
			Handler:    _Product_AddSpikeProduct_Handler,
		},
		{
			MethodName: "FlashSale",
			Handler:    _Product_FlashSale_Handler,
		},
		{
			MethodName: "UserJoinGroup",
			Handler:    _Product_UserJoinGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
