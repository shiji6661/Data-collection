// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Order_CreateOrder_FullMethodName         = "/order.Order/CreateOrder"
	Order_CreateOrderMessage_FullMethodName  = "/order.Order/CreateOrderMessage"
	Order_CreateOrderCart_FullMethodName     = "/order.Order/CreateOrderCart"
	Order_OrderPay_FullMethodName            = "/order.Order/OrderPay"
	Order_OrderPayBakeCall_FullMethodName    = "/order.Order/OrderPayBakeCall"
	Order_CreateOrderBargain_FullMethodName  = "/order.Order/CreateOrderBargain"
	Order_CreateOrCode_FullMethodName        = "/order.Order/CreateOrCode"
	Order_MerchantCountAmount_FullMethodName = "/order.Order/MerchantCountAmount"
	Order_OrderCreate_FullMethodName         = "/order.Order/OrderCreate"
)

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	CreateOrderMessage(ctx context.Context, in *CreateOrderMessageRequest, opts ...grpc.CallOption) (*CreateOrderMessageResponse, error)
	CreateOrderCart(ctx context.Context, in *CreateOrderCartRequest, opts ...grpc.CallOption) (*CreateOrderCartResponse, error)
	OrderPay(ctx context.Context, in *OrderPayRequest, opts ...grpc.CallOption) (*OrderPayResponse, error)
	OrderPayBakeCall(ctx context.Context, in *OrderPayBakeCallRequest, opts ...grpc.CallOption) (*OrderPayBakeCallResponse, error)
	CreateOrderBargain(ctx context.Context, in *CreateOrderBargainRequest, opts ...grpc.CallOption) (*CreateOrderBargainResponse, error)
	CreateOrCode(ctx context.Context, in *CreateOrCodeRequest, opts ...grpc.CallOption) (*CreateOrCodeResponse, error)
	MerchantCountAmount(ctx context.Context, in *MerchantCountAmountRequest, opts ...grpc.CallOption) (*MerchantCountAmountResponse, error)
	OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, Order_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateOrderMessage(ctx context.Context, in *CreateOrderMessageRequest, opts ...grpc.CallOption) (*CreateOrderMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderMessageResponse)
	err := c.cc.Invoke(ctx, Order_CreateOrderMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateOrderCart(ctx context.Context, in *CreateOrderCartRequest, opts ...grpc.CallOption) (*CreateOrderCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderCartResponse)
	err := c.cc.Invoke(ctx, Order_CreateOrderCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) OrderPay(ctx context.Context, in *OrderPayRequest, opts ...grpc.CallOption) (*OrderPayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPayResponse)
	err := c.cc.Invoke(ctx, Order_OrderPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) OrderPayBakeCall(ctx context.Context, in *OrderPayBakeCallRequest, opts ...grpc.CallOption) (*OrderPayBakeCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPayBakeCallResponse)
	err := c.cc.Invoke(ctx, Order_OrderPayBakeCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateOrderBargain(ctx context.Context, in *CreateOrderBargainRequest, opts ...grpc.CallOption) (*CreateOrderBargainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderBargainResponse)
	err := c.cc.Invoke(ctx, Order_CreateOrderBargain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CreateOrCode(ctx context.Context, in *CreateOrCodeRequest, opts ...grpc.CallOption) (*CreateOrCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrCodeResponse)
	err := c.cc.Invoke(ctx, Order_CreateOrCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) MerchantCountAmount(ctx context.Context, in *MerchantCountAmountRequest, opts ...grpc.CallOption) (*MerchantCountAmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantCountAmountResponse)
	err := c.cc.Invoke(ctx, Order_MerchantCountAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderCreateResponse)
	err := c.cc.Invoke(ctx, Order_OrderCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility.
type OrderServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	CreateOrderMessage(context.Context, *CreateOrderMessageRequest) (*CreateOrderMessageResponse, error)
	CreateOrderCart(context.Context, *CreateOrderCartRequest) (*CreateOrderCartResponse, error)
	OrderPay(context.Context, *OrderPayRequest) (*OrderPayResponse, error)
	OrderPayBakeCall(context.Context, *OrderPayBakeCallRequest) (*OrderPayBakeCallResponse, error)
	CreateOrderBargain(context.Context, *CreateOrderBargainRequest) (*CreateOrderBargainResponse, error)
	CreateOrCode(context.Context, *CreateOrCodeRequest) (*CreateOrCodeResponse, error)
	MerchantCountAmount(context.Context, *MerchantCountAmountRequest) (*MerchantCountAmountResponse, error)
	OrderCreate(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServer struct{}

func (UnimplementedOrderServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServer) CreateOrderMessage(context.Context, *CreateOrderMessageRequest) (*CreateOrderMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderMessage not implemented")
}
func (UnimplementedOrderServer) CreateOrderCart(context.Context, *CreateOrderCartRequest) (*CreateOrderCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderCart not implemented")
}
func (UnimplementedOrderServer) OrderPay(context.Context, *OrderPayRequest) (*OrderPayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPay not implemented")
}
func (UnimplementedOrderServer) OrderPayBakeCall(context.Context, *OrderPayBakeCallRequest) (*OrderPayBakeCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPayBakeCall not implemented")
}
func (UnimplementedOrderServer) CreateOrderBargain(context.Context, *CreateOrderBargainRequest) (*CreateOrderBargainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderBargain not implemented")
}
func (UnimplementedOrderServer) CreateOrCode(context.Context, *CreateOrCodeRequest) (*CreateOrCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrCode not implemented")
}
func (UnimplementedOrderServer) MerchantCountAmount(context.Context, *MerchantCountAmountRequest) (*MerchantCountAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantCountAmount not implemented")
}
func (UnimplementedOrderServer) OrderCreate(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCreate not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}
func (UnimplementedOrderServer) testEmbeddedByValue()               {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	// If the following call pancis, it indicates UnimplementedOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateOrderMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrderMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrderMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrderMessage(ctx, req.(*CreateOrderMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateOrderCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrderCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrderCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrderCart(ctx, req.(*CreateOrderCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_OrderPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).OrderPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_OrderPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).OrderPay(ctx, req.(*OrderPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_OrderPayBakeCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayBakeCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).OrderPayBakeCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_OrderPayBakeCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).OrderPayBakeCall(ctx, req.(*OrderPayBakeCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateOrderBargain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrderBargain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrderBargain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrderBargain(ctx, req.(*CreateOrderBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CreateOrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_CreateOrCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrCode(ctx, req.(*CreateOrCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_MerchantCountAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantCountAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).MerchantCountAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_MerchantCountAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).MerchantCountAmount(ctx, req.(*MerchantCountAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_OrderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).OrderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_OrderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).OrderCreate(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Order_CreateOrder_Handler,
		},
		{
			MethodName: "CreateOrderMessage",
			Handler:    _Order_CreateOrderMessage_Handler,
		},
		{
			MethodName: "CreateOrderCart",
			Handler:    _Order_CreateOrderCart_Handler,
		},
		{
			MethodName: "OrderPay",
			Handler:    _Order_OrderPay_Handler,
		},
		{
			MethodName: "OrderPayBakeCall",
			Handler:    _Order_OrderPayBakeCall_Handler,
		},
		{
			MethodName: "CreateOrderBargain",
			Handler:    _Order_CreateOrderBargain_Handler,
		},
		{
			MethodName: "CreateOrCode",
			Handler:    _Order_CreateOrCode_Handler,
		},
		{
			MethodName: "MerchantCountAmount",
			Handler:    _Order_MerchantCountAmount_Handler,
		},
		{
			MethodName: "OrderCreate",
			Handler:    _Order_OrderCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
